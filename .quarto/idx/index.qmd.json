{"title":"dallas_co <- tigris::counties(state = \"TX\") %>%","markdown":{"yaml":{"pagetitle":"Evictions and Courts Map","format":"html"},"headingText":"dallas_co <- tigris::counties(state = \"TX\") %>%","containsRefs":false,"markdown":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\nlibrary(mapboxapi)\nlibrary(plotly)\n\nsf_use_s2(FALSE)\n\ndallas_co <- sf::read_sf(\"data/dallas_co.geojson\")\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\n\njpbounds <- sf::read_sf(\"data/jpcourt_bounds.geojson\")%>%\n  st_transform(st_crs(dallas_co))\n\njpbounds_inner <- sf::read_sf(\"data/jpcourts_inner.geojson\") %>%\n  st_transform(st_crs(dallas_co))\n\njpcourts <- read_csv(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\") %>%\n  mutate(Court = paste0(\"jp\", str_sub(`Court/Precinct`, 4, 4)),\n         jp = str_sub(`Court/Precinct`, 4, 4)) %>%\n  sf::st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(dallas_co)) %>%\n  st_make_valid()\n# jpcourts_geo <- jpcourts %>%\n#   tidygeocoder::geocode(Address, method = \"arcgis\", lat = lat, long = long)\n# write_csv(jpcourts_geo, \"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\")\n\nisochrones <- list()\n\nfor (n in unique(jpcourts$jp)) {\n  isochrone <- mb_isochrone(jpcourts %>% filter(jp == n)) %>%\n    st_transform(st_crs(dallas_co)) %>%\n    group_by(time) %>%\n    summarize(geometry = st_union(geometry)) %>%\n    st_intersection(jpbounds %>% filter(DallasCo_1 == n)) %>%\n    st_make_valid()\n  \n  isochrones[[n]] <- isochrone\n}\n\nisochrone <- bind_rows(isochrones) %>%\n  mutate(\n    fill = case_match(\n      time,\n      15 ~ '#fcba03',\n      10 ~ '#9fde00',\n      5 ~ '#2ead00',\n    ),\n    opa = case_match(\n      time,\n      15 ~ 0.1,\n      10 ~ 0.25,\n      5 ~ 0.4,\n    ),\n    rgba = case_match( #cpaltemplates::palette_cpal_purple[3]\n      time,\n      15 ~ rgb(156/255, 100/255, 247/255, 0.1),\n      10 ~ rgb(156/255, 100/255, 247/255, 0.2),\n      5 ~ rgb(156/255, 100/255, 247/255, 0.3)\n    )\n  ) %>%\n  select(time, geometry, fill, opa, rgba)\n\n\n# isochrone <- mb_isochrone(jpcourts) %>%\n#   st_transform(st_crs(dallas_co)) %>%\n#   group_by(time) %>%\n#   summarize(geometry = st_union(geometry)) %>%\n#   st_intersection(dallas_co) %>%\n#   st_make_valid() %>%\n#   mutate(\n#     fill = case_match(\n#       time,\n#       15 ~ '#fcba03',\n#       10 ~ '#9fde00',\n#       5 ~ '#2ead00',\n#     ),\n#     opa = case_match(\n#       time,\n#       15 ~ 0.1,\n#       10 ~ 0.2,\n#       5 ~ 0.3,\n#     ),\n#     rgba = case_match(\n#       time,\n#       15 ~ rgb(50/255, 168/255, 82/255, 0.1),\n#       10 ~ rgb(50/255, 168/255, 82/255, 0.2),\n#       5 ~ rgb(50/255, 168/255, 82/255, 0.3)\n#     )\n#   ) %>%\n#   select(time, geometry, fill, opa, rgba)\n\nanti <- st_difference(isochrone, dallas_co)\n  \nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nevictions <- arrow::read_parquet(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet\")[-1,]\n\ngooglesheets4::gs4_auth(email = \"taylor@childpovertyactionlab.org\")\n\nobs <- googlesheets4::read_sheet(ss = \"https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk\",\n                               sheet = \"Form Responses 1\") %>%\n  janitor::clean_names(.) %>%\n  rename(\"timeStamp\"=\"timestamp\",\n         \"observer\"=\"observer\",\n         \"observationDate\"=\"date_of_observation\",\n         \"jpCourt\"=\"justice_of_the_peace_court\",\n         \"docketStart\"=\"docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am\",\n         \"docketEnd\"=\"docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm\",\n         \"caseType\"=\"is_this_a_commercial_or_residential_eviction_case\",\n         \"plaintiffName\"=\"plaintiff_landlord_name\",\n         \"plaintiffDesignee\"=\"did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear\",\n         \"plaintiffRep\"=\"did_the_plaintiff_landlord_have_additional_representation_of_some_kind\",\n         \"defName\"=\"defendant_tenant_name\",\n         \"defAppear\"=\"did_the_defendant_tenant_appear\",\n         \"defRep\"=\"did_the_defendant_tenant_have_additional_representation_of_some_kind\",\n         \"evicReason\"=\"reason_for_eviction_select_multiple_if_applicable\",\n         \"totalOwned\"=\"total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50\",\n         \"noticeVacate\"=\"was_there_any_discussion_about_the_notice_to_vacate_ntv\",\n         \"noticeConfirm\"=\"if_yes_did_the_judge_confirm_the_ntv\",\n         \"jpRuled\"=\"the_jp_ruled_in_favor_of\",\n         \"outcomeOther\"=\"if_you_selected_other_please_specify_the_outcome_of_the_case_below\",\n         \"otherNotes\"=\"additional_case_notes\"\n  ) %>%\n  filter(\n    # !jpCourt %in% c(\"5-2\", \"3-2\", \"2-1\"),\n    !is.na(jpCourt),\n    observationDate <= today()\n  ) %>%\n  mutate(jpCourt = paste(\"Court\", jpCourt)) %>%\n  filter(!is.na(jpCourt)) %>%\n  mutate(jpRuled = factor(\n    jpRuled, \n    levels =\n        c(\"Plaintiff (landlord)\",\n          \"Plaintiff by default (defendant no-show)\",\n          \"Defendant (tenant)\",\n          \"Defendant by default (plaintiff no-show)\",\n          \"The case was abated or reset/rescheduled to a later date.\",\n          \"The case was dismissed.\",\n          \"Other\",\n          \"Unknown\"\n        )\n      )\n    # labels = \n    #   c(\n    #     \"Plaintiff (landlord)\" = \"Plaintiff (landlord)\",\n    #     \"Plaintiff by default (defendant no-show)\" = \"Plaintiff by default (defendant no-show)\",\n    #     \"Unknown\" = \"Unknown\",\n    #     \"Defendant (tenant)\" = \"Defendant (tenant)\",\n    #     \"Other\" = \"Other\",\n    #     \"Defendant by default (plaintiff no-show)\" = \"Defendant by default (plaintiff no-show)\",\n    #     \"The case was abated or reset/rescheduled to a later date.\" = \"The case was abated or rescheduled\",\n    #     \"The case was dismissed.\" = \"The case was dismissed\"\n    #   )\n  )\n\n  # mutate(outcomeParty = case_when(\n  #   str_detect(jpRuled, \"Plaintiff\") ~ \"Ruled in Favor of Landlord\",\n  #   str_detect(jpRuled, \"Defendant\") ~ \"Ruled in Favor of Tenant\",\n  #   str_detect(jpRuled, \"abated\") ~ \"Abated\",\n  #   str_detect(jpRuled, \"dismissed\") ~ \"Dismissed\",\n  #   TRUE ~ jpRuled\n  # ))\n\n# outcomes <- obs %>%\n#   group_by(jpCourt, outcomeParty, defAppear) %>%\n#   summarize(count = n()) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup(.) %>%\n#   group_by(outcomeParty) %>%\n#   group_map(~ .x %>%\n#           janitor::adorn_totals(),.keep = T) %>% \n#   bind_rows() %>%\n#   mutate(test = lag(outcomeParty),\n#          outcomeParty = ifelse(str_detect(outcomeParty, \"Other|Dismissed|Abated|Ruled|Unknown\"), outcomeParty, test)) %>%\n#   select(-test) %>%\n#   group_by(jpCourt) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup()\n\n\ndf0 <- evictions %>%\n  right_join(obs, by = c(\"case_number\"), suffix = c(\"\", \"_obs\")) %>%\n  filter(jpRuled %in%\n    c(\"Plaintiff (landlord)\",\n      \"Plaintiff by default (defendant no-show)\")) %>%\n  mutate(\n    show = case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ 1,\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ 2,\n      TRUE ~ NA\n    ))\n\nct <- NULL\nct$showcount <- nrow(df0 %>% filter(show == 1))\nct$noshowcount <- nrow(df0 %>% filter(show == 2))\n\n\ndf <- df0 %>%\n  mutate(\n    group = factor(case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ paste0(\"Defendant did not appear (\", ct$noshowcount, \")\"),\n      TRUE ~ NA\n    ), levels = c(\n      paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      paste0(\"Defendant did not appear (\", ct$noshowcount, \")\")\n    )),\n    lng = jitter(as.numeric(X), 0.001),\n    lat = jitter(as.numeric(Y), 0.001)\n  ) %>%\n  filter(!is.na(lng), !is.na(lat)) %>%\n  sf::st_as_sf(coords = c(\"lng\", \"lat\")) %>%\n  sf::st_set_crs(st_crs(isochrone)) %>%\n  st_join(isochrone) %>%\n  mutate(\n    time = factor(if_else(is.na(time), \"More than 15\", as.character(time)),\n                  levels = c(\"5\",\"10\",\"15\",\"More than 15\")),\n    fill = if_else(is.na(fill), '#a36250', fill),\n    gfill = case_match(\n      group,\n      levels(group)[1] ~ cpaltemplates::palette_cpal_teal[8],\n      levels(group)[2] ~ cpaltemplates::palette_cpal_magenta[5]\n    ),\n    id = row_number()\n  )\n\ntime_count <- df %>%\n  st_drop_geometry() %>%\n  group_by(time) %>%\n  summarize(tc = n())\n\nshow_time_count <- df %>%\n  st_drop_geometry() %>%\n  left_join(time_count, by = \"time\") %>%\n  group_by(time, show) %>%\n  summarize(n = n(), prop = n / first(tc), opa = first(opa)) %>%\n  mutate(time = paste(time, \"min.\"),\n         time = case_match(\n           time,\n           \"5 min.\" ~ \"Less than 5 min.\",\n           \"10 min.\" ~ \"5 to 10 min.\",\n           \"15 min.\" ~ \"10 to 15 min.\",\n           time ~ paste0(time, \"\")),\n         timel = tolower(time),\n         opa = (if_else(is.na(opa), 0, opa) + 0.1) * 2,\n          grgba = case_match(\n            show,\n            1 ~ rgb(4, 45, 51, opa*255, maxColorValue = 255),\n            2 ~ rgb(237, 1, 140, opa*255, maxColorValue = 255)\n          ),\n         def_appeared = case_match(\n            show,\n            1 ~ \"Defendant appeared\",\n            2 ~ \"Defendant did not appear\"\n          )\n         )\n\ndownload <- df %>%\n  st_drop_geometry() %>%\n  mutate(\n    def_appeared = case_match(\n      show,\n      1 ~ \"def_appeared\",\n      2 ~ \"def_not_appeared\"\n    ),\n    drive_time_more_than = case_match(\n      time,\n      \"5\" ~ 0,\n      \"10\" ~ 5,\n      \"15\" ~ 10,\n      \"More than 15\" ~ 15,\n    )\n  ) %>%\n  group_by(drive_time_more_than, def_appeared, jp_court = jpCourt) %>%\n  summarize(evictions = n()) %>%\n  pivot_wider(\n    names_from = def_appeared,\n    values_from = evictions\n  ) %>%\n  mutate(\n    def_appeared = if_else(is.na(def_appeared), 0, def_appeared),\n    def_not_appeared = if_else(is.na(def_not_appeared), 0, def_not_appeared)\n  )\n\nwrite_csv(download, \"data/evictions_and_courts.csv\")\n\n```\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<h4 style=\"margin-bottom: 10px;\">Mapping eviction cases where defendants lost their case</h4>\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n  \n  <div class=\"button-group\">\n\n    <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"table\" autocomplete=\"off\" checked>\n    <label class=\"btn btn-secondary\" for=\"table\">Table</label>\n    \n    <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"chart\" autocomplete=\"off\">\n    <label class=\"btn btn-secondary\" for=\"chart\">Chart</label>\n\n  </div>\n  \n  <div class=\"card-side\">\n  \n    <div class=\"table-box\">\n\n```    \n\n```{r table}\n\nshow_time_count %>%\n  mutate(\n    def_appeared = case_match(\n            show,\n            1 ~ \"Def. app.\",\n            2 ~ \"Def. no app.\"\n          )\n  ) %>%\n  select(`Drive time` = time, def_appeared, n) %>%\n  pivot_wider(\n    names_from = def_appeared,\n    values_from = n\n  ) %>%\n  DT::datatable(options = list(dom = 't', ordering=F,\n                               autoWidth = FALSE),\n                rownames = FALSE)\n\n```\n   \n```{=html}\n    <span class=\"subtext\"><i>Statistically insignificant correlation</i></span>\n    </div>\n    \n    <div class=\"plotly-box\" style=\"display: none;\">\n\n```\n\n```{r plotly}\n\nshow_time_count %>%\n  plot_ly(\n    type = \"bar\",\n    x = ~prop,\n    y = ~time,\n    customdata = ~I(def_appeared),\n    hovertext = ~I(timel),\n    text = ~I(scales::percent(prop, accuracy = 0.1)),\n    hovertemplate = \"<b>%{customdata}</b> and had to drive <b>%{hovertext}</b><br><br>Out of others driving %{hovertext}: <b>%{x:,.01%}<b><extra></extra>\",\n    marker = list(\n      color = I(show_time_count$grgba)\n    ),\n    orientation = \"h\"\n  ) %>%\n  layout(\n    width=300,\n    height=250,\n    autosize=T,\n    dragmode = FALSE,\n    barmode = 'stack',\n    showlegend = FALSE,\n    yaxis = list(title = NA,\n                 categoryorder = \"array\",\n                 categoryarray = c( \"More than 15 min.\", \n                                    \"10 to 15 min.\",\n                                    \"5 to 10 min.\",\n                                    \"Less than 5 min.\"),\n                 ticksuffix = \"  \"\n                 ),\n    xaxis = list(\n      showgrid = FALSE,\n      showticklabels = FALSE,\n      title = NA,\n      zeroline = FALSE\n    ),\n    hoverlabel = list(align = \"left\")\n    # margin = list(\n    #   l = 0,\n    #   r = 0,\n    #   t = 0,\n    #   b = 0\n    # ),\n    \n  ) %>% \n  config(displayModeBar = F)\n\n```\n\n\n```{=html}\n    </div>\n  \n  </div>\n  \n  <div class=\"download-box\">\n    <div class=\"download\">\n      <a href=\"data/evictions_and_courts.csv\" download>Download data <i class=\"bi bi-download\"></i></a>\n    </div>\n  </div>\n    \n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\niconList <- iconList(\n  jp1  = makeIcon(\"www/svgs/jp-1.svg\", \"www/svgs/jp-1.svg\", 24, 24),\n  jp2  = makeIcon(\"www/svgs/jp-2.svg\", \"www/svgs/jp-2.svg\", 24, 24),\n  jp3  = makeIcon(\"www/svgs/jp-3.svg\", \"www/svgs/jp-3.svg\", 24, 24),\n  jp4  = makeIcon(\"www/svgs/jp-4.svg\", \"www/svgs/jp-4.svg\", 24, 24),\n  jp5  = makeIcon(\"www/svgs/jp-5.svg\", \"www/svgs/jp-5.svg\", 24, 24)\n)\n\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  # addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addMapPane(\"back\", zIndex = 410) %>%\n  addMapPane(\"mid\", zIndex = 415) %>%\n  addMapPane(\"front\", zIndex = 420) %>%\n  addMapPane(\"veryfront\", zIndex = 425) %>%\n  addPolygons(\n    data = dallas_co,\n    fillColor = cpaltemplates::palette_cpal_gray[8],\n    fillOpacity = 0.1, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"mid\")\n  ) %>%\n  leaflet::addPolylines(\n    group = \"JP locations\",\n    data = jpbounds_inner,\n    fillColor = cpaltemplates::palette_cpal_gray[8],\n    fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"mid\")\n  ) %>%\n  addPolygons(\n    group = \"Drive time zones\",\n    data = isochrone,\n    fillColor = '#9c64f7',\n    fillOpacity = ~opa, \n    weight = 1, \n    color = cpaltemplates::palette_cpal_gray[8],\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"back\")\n  ) %>%\n  addMarkers(\n    group = \"JP locations\",\n    data = jpcourts,\n    icon = ~iconList[Court],\n    options = pathOptions(pane = \"veryfront\")\n  ) %>%\n  addCircleMarkers(\n    group = levels(df$group)[2],\n    data = df %>% filter(show == 2),\n    radius = 2,\n    stroke = FALSE,\n    color = ~gfill,\n    fillOpacity = 0.3,\n    options = pathOptions(pane = \"front\")\n  ) %>%\n  addCircleMarkers(\n    group = levels(df$group)[1],\n    data = df %>% filter(show == 1),\n    radius = 2,\n    stroke = FALSE,\n    color = ~gfill,\n    fillOpacity = 0.3,\n    options = pathOptions(pane = \"front\")\n  ) %>%\n  addLegend(\n    \"bottomright\",\n    pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),\n    values = isochrone$time,\n    title = \"Driving distance (min)\",\n    opacity = 1\n  ) %>%\n  addLayersControl(\n    baseGroups = c(levels(df$group)),\n    overlayGroups = c(\"Drive time zones\", \"JP locations\"),\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])  \n\n```\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```","srcMarkdownNoYaml":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\nlibrary(mapboxapi)\nlibrary(plotly)\n\nsf_use_s2(FALSE)\n\ndallas_co <- sf::read_sf(\"data/dallas_co.geojson\")\n# dallas_co <- tigris::counties(state = \"TX\") %>%\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\n\njpbounds <- sf::read_sf(\"data/jpcourt_bounds.geojson\")%>%\n  st_transform(st_crs(dallas_co))\n\njpbounds_inner <- sf::read_sf(\"data/jpcourts_inner.geojson\") %>%\n  st_transform(st_crs(dallas_co))\n\njpcourts <- read_csv(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\") %>%\n  mutate(Court = paste0(\"jp\", str_sub(`Court/Precinct`, 4, 4)),\n         jp = str_sub(`Court/Precinct`, 4, 4)) %>%\n  sf::st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(dallas_co)) %>%\n  st_make_valid()\n# jpcourts_geo <- jpcourts %>%\n#   tidygeocoder::geocode(Address, method = \"arcgis\", lat = lat, long = long)\n# write_csv(jpcourts_geo, \"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\")\n\nisochrones <- list()\n\nfor (n in unique(jpcourts$jp)) {\n  isochrone <- mb_isochrone(jpcourts %>% filter(jp == n)) %>%\n    st_transform(st_crs(dallas_co)) %>%\n    group_by(time) %>%\n    summarize(geometry = st_union(geometry)) %>%\n    st_intersection(jpbounds %>% filter(DallasCo_1 == n)) %>%\n    st_make_valid()\n  \n  isochrones[[n]] <- isochrone\n}\n\nisochrone <- bind_rows(isochrones) %>%\n  mutate(\n    fill = case_match(\n      time,\n      15 ~ '#fcba03',\n      10 ~ '#9fde00',\n      5 ~ '#2ead00',\n    ),\n    opa = case_match(\n      time,\n      15 ~ 0.1,\n      10 ~ 0.25,\n      5 ~ 0.4,\n    ),\n    rgba = case_match( #cpaltemplates::palette_cpal_purple[3]\n      time,\n      15 ~ rgb(156/255, 100/255, 247/255, 0.1),\n      10 ~ rgb(156/255, 100/255, 247/255, 0.2),\n      5 ~ rgb(156/255, 100/255, 247/255, 0.3)\n    )\n  ) %>%\n  select(time, geometry, fill, opa, rgba)\n\n\n# isochrone <- mb_isochrone(jpcourts) %>%\n#   st_transform(st_crs(dallas_co)) %>%\n#   group_by(time) %>%\n#   summarize(geometry = st_union(geometry)) %>%\n#   st_intersection(dallas_co) %>%\n#   st_make_valid() %>%\n#   mutate(\n#     fill = case_match(\n#       time,\n#       15 ~ '#fcba03',\n#       10 ~ '#9fde00',\n#       5 ~ '#2ead00',\n#     ),\n#     opa = case_match(\n#       time,\n#       15 ~ 0.1,\n#       10 ~ 0.2,\n#       5 ~ 0.3,\n#     ),\n#     rgba = case_match(\n#       time,\n#       15 ~ rgb(50/255, 168/255, 82/255, 0.1),\n#       10 ~ rgb(50/255, 168/255, 82/255, 0.2),\n#       5 ~ rgb(50/255, 168/255, 82/255, 0.3)\n#     )\n#   ) %>%\n#   select(time, geometry, fill, opa, rgba)\n\nanti <- st_difference(isochrone, dallas_co)\n  \nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nevictions <- arrow::read_parquet(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet\")[-1,]\n\ngooglesheets4::gs4_auth(email = \"taylor@childpovertyactionlab.org\")\n\nobs <- googlesheets4::read_sheet(ss = \"https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk\",\n                               sheet = \"Form Responses 1\") %>%\n  janitor::clean_names(.) %>%\n  rename(\"timeStamp\"=\"timestamp\",\n         \"observer\"=\"observer\",\n         \"observationDate\"=\"date_of_observation\",\n         \"jpCourt\"=\"justice_of_the_peace_court\",\n         \"docketStart\"=\"docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am\",\n         \"docketEnd\"=\"docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm\",\n         \"caseType\"=\"is_this_a_commercial_or_residential_eviction_case\",\n         \"plaintiffName\"=\"plaintiff_landlord_name\",\n         \"plaintiffDesignee\"=\"did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear\",\n         \"plaintiffRep\"=\"did_the_plaintiff_landlord_have_additional_representation_of_some_kind\",\n         \"defName\"=\"defendant_tenant_name\",\n         \"defAppear\"=\"did_the_defendant_tenant_appear\",\n         \"defRep\"=\"did_the_defendant_tenant_have_additional_representation_of_some_kind\",\n         \"evicReason\"=\"reason_for_eviction_select_multiple_if_applicable\",\n         \"totalOwned\"=\"total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50\",\n         \"noticeVacate\"=\"was_there_any_discussion_about_the_notice_to_vacate_ntv\",\n         \"noticeConfirm\"=\"if_yes_did_the_judge_confirm_the_ntv\",\n         \"jpRuled\"=\"the_jp_ruled_in_favor_of\",\n         \"outcomeOther\"=\"if_you_selected_other_please_specify_the_outcome_of_the_case_below\",\n         \"otherNotes\"=\"additional_case_notes\"\n  ) %>%\n  filter(\n    # !jpCourt %in% c(\"5-2\", \"3-2\", \"2-1\"),\n    !is.na(jpCourt),\n    observationDate <= today()\n  ) %>%\n  mutate(jpCourt = paste(\"Court\", jpCourt)) %>%\n  filter(!is.na(jpCourt)) %>%\n  mutate(jpRuled = factor(\n    jpRuled, \n    levels =\n        c(\"Plaintiff (landlord)\",\n          \"Plaintiff by default (defendant no-show)\",\n          \"Defendant (tenant)\",\n          \"Defendant by default (plaintiff no-show)\",\n          \"The case was abated or reset/rescheduled to a later date.\",\n          \"The case was dismissed.\",\n          \"Other\",\n          \"Unknown\"\n        )\n      )\n    # labels = \n    #   c(\n    #     \"Plaintiff (landlord)\" = \"Plaintiff (landlord)\",\n    #     \"Plaintiff by default (defendant no-show)\" = \"Plaintiff by default (defendant no-show)\",\n    #     \"Unknown\" = \"Unknown\",\n    #     \"Defendant (tenant)\" = \"Defendant (tenant)\",\n    #     \"Other\" = \"Other\",\n    #     \"Defendant by default (plaintiff no-show)\" = \"Defendant by default (plaintiff no-show)\",\n    #     \"The case was abated or reset/rescheduled to a later date.\" = \"The case was abated or rescheduled\",\n    #     \"The case was dismissed.\" = \"The case was dismissed\"\n    #   )\n  )\n\n  # mutate(outcomeParty = case_when(\n  #   str_detect(jpRuled, \"Plaintiff\") ~ \"Ruled in Favor of Landlord\",\n  #   str_detect(jpRuled, \"Defendant\") ~ \"Ruled in Favor of Tenant\",\n  #   str_detect(jpRuled, \"abated\") ~ \"Abated\",\n  #   str_detect(jpRuled, \"dismissed\") ~ \"Dismissed\",\n  #   TRUE ~ jpRuled\n  # ))\n\n# outcomes <- obs %>%\n#   group_by(jpCourt, outcomeParty, defAppear) %>%\n#   summarize(count = n()) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup(.) %>%\n#   group_by(outcomeParty) %>%\n#   group_map(~ .x %>%\n#           janitor::adorn_totals(),.keep = T) %>% \n#   bind_rows() %>%\n#   mutate(test = lag(outcomeParty),\n#          outcomeParty = ifelse(str_detect(outcomeParty, \"Other|Dismissed|Abated|Ruled|Unknown\"), outcomeParty, test)) %>%\n#   select(-test) %>%\n#   group_by(jpCourt) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup()\n\n\ndf0 <- evictions %>%\n  right_join(obs, by = c(\"case_number\"), suffix = c(\"\", \"_obs\")) %>%\n  filter(jpRuled %in%\n    c(\"Plaintiff (landlord)\",\n      \"Plaintiff by default (defendant no-show)\")) %>%\n  mutate(\n    show = case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ 1,\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ 2,\n      TRUE ~ NA\n    ))\n\nct <- NULL\nct$showcount <- nrow(df0 %>% filter(show == 1))\nct$noshowcount <- nrow(df0 %>% filter(show == 2))\n\n\ndf <- df0 %>%\n  mutate(\n    group = factor(case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ paste0(\"Defendant did not appear (\", ct$noshowcount, \")\"),\n      TRUE ~ NA\n    ), levels = c(\n      paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      paste0(\"Defendant did not appear (\", ct$noshowcount, \")\")\n    )),\n    lng = jitter(as.numeric(X), 0.001),\n    lat = jitter(as.numeric(Y), 0.001)\n  ) %>%\n  filter(!is.na(lng), !is.na(lat)) %>%\n  sf::st_as_sf(coords = c(\"lng\", \"lat\")) %>%\n  sf::st_set_crs(st_crs(isochrone)) %>%\n  st_join(isochrone) %>%\n  mutate(\n    time = factor(if_else(is.na(time), \"More than 15\", as.character(time)),\n                  levels = c(\"5\",\"10\",\"15\",\"More than 15\")),\n    fill = if_else(is.na(fill), '#a36250', fill),\n    gfill = case_match(\n      group,\n      levels(group)[1] ~ cpaltemplates::palette_cpal_teal[8],\n      levels(group)[2] ~ cpaltemplates::palette_cpal_magenta[5]\n    ),\n    id = row_number()\n  )\n\ntime_count <- df %>%\n  st_drop_geometry() %>%\n  group_by(time) %>%\n  summarize(tc = n())\n\nshow_time_count <- df %>%\n  st_drop_geometry() %>%\n  left_join(time_count, by = \"time\") %>%\n  group_by(time, show) %>%\n  summarize(n = n(), prop = n / first(tc), opa = first(opa)) %>%\n  mutate(time = paste(time, \"min.\"),\n         time = case_match(\n           time,\n           \"5 min.\" ~ \"Less than 5 min.\",\n           \"10 min.\" ~ \"5 to 10 min.\",\n           \"15 min.\" ~ \"10 to 15 min.\",\n           time ~ paste0(time, \"\")),\n         timel = tolower(time),\n         opa = (if_else(is.na(opa), 0, opa) + 0.1) * 2,\n          grgba = case_match(\n            show,\n            1 ~ rgb(4, 45, 51, opa*255, maxColorValue = 255),\n            2 ~ rgb(237, 1, 140, opa*255, maxColorValue = 255)\n          ),\n         def_appeared = case_match(\n            show,\n            1 ~ \"Defendant appeared\",\n            2 ~ \"Defendant did not appear\"\n          )\n         )\n\ndownload <- df %>%\n  st_drop_geometry() %>%\n  mutate(\n    def_appeared = case_match(\n      show,\n      1 ~ \"def_appeared\",\n      2 ~ \"def_not_appeared\"\n    ),\n    drive_time_more_than = case_match(\n      time,\n      \"5\" ~ 0,\n      \"10\" ~ 5,\n      \"15\" ~ 10,\n      \"More than 15\" ~ 15,\n    )\n  ) %>%\n  group_by(drive_time_more_than, def_appeared, jp_court = jpCourt) %>%\n  summarize(evictions = n()) %>%\n  pivot_wider(\n    names_from = def_appeared,\n    values_from = evictions\n  ) %>%\n  mutate(\n    def_appeared = if_else(is.na(def_appeared), 0, def_appeared),\n    def_not_appeared = if_else(is.na(def_not_appeared), 0, def_not_appeared)\n  )\n\nwrite_csv(download, \"data/evictions_and_courts.csv\")\n\n```\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<h4 style=\"margin-bottom: 10px;\">Mapping eviction cases where defendants lost their case</h4>\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n  \n  <div class=\"button-group\">\n\n    <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"table\" autocomplete=\"off\" checked>\n    <label class=\"btn btn-secondary\" for=\"table\">Table</label>\n    \n    <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"chart\" autocomplete=\"off\">\n    <label class=\"btn btn-secondary\" for=\"chart\">Chart</label>\n\n  </div>\n  \n  <div class=\"card-side\">\n  \n    <div class=\"table-box\">\n\n```    \n\n```{r table}\n\nshow_time_count %>%\n  mutate(\n    def_appeared = case_match(\n            show,\n            1 ~ \"Def. app.\",\n            2 ~ \"Def. no app.\"\n          )\n  ) %>%\n  select(`Drive time` = time, def_appeared, n) %>%\n  pivot_wider(\n    names_from = def_appeared,\n    values_from = n\n  ) %>%\n  DT::datatable(options = list(dom = 't', ordering=F,\n                               autoWidth = FALSE),\n                rownames = FALSE)\n\n```\n   \n```{=html}\n    <span class=\"subtext\"><i>Statistically insignificant correlation</i></span>\n    </div>\n    \n    <div class=\"plotly-box\" style=\"display: none;\">\n\n```\n\n```{r plotly}\n\nshow_time_count %>%\n  plot_ly(\n    type = \"bar\",\n    x = ~prop,\n    y = ~time,\n    customdata = ~I(def_appeared),\n    hovertext = ~I(timel),\n    text = ~I(scales::percent(prop, accuracy = 0.1)),\n    hovertemplate = \"<b>%{customdata}</b> and had to drive <b>%{hovertext}</b><br><br>Out of others driving %{hovertext}: <b>%{x:,.01%}<b><extra></extra>\",\n    marker = list(\n      color = I(show_time_count$grgba)\n    ),\n    orientation = \"h\"\n  ) %>%\n  layout(\n    width=300,\n    height=250,\n    autosize=T,\n    dragmode = FALSE,\n    barmode = 'stack',\n    showlegend = FALSE,\n    yaxis = list(title = NA,\n                 categoryorder = \"array\",\n                 categoryarray = c( \"More than 15 min.\", \n                                    \"10 to 15 min.\",\n                                    \"5 to 10 min.\",\n                                    \"Less than 5 min.\"),\n                 ticksuffix = \"  \"\n                 ),\n    xaxis = list(\n      showgrid = FALSE,\n      showticklabels = FALSE,\n      title = NA,\n      zeroline = FALSE\n    ),\n    hoverlabel = list(align = \"left\")\n    # margin = list(\n    #   l = 0,\n    #   r = 0,\n    #   t = 0,\n    #   b = 0\n    # ),\n    \n  ) %>% \n  config(displayModeBar = F)\n\n```\n\n\n```{=html}\n    </div>\n  \n  </div>\n  \n  <div class=\"download-box\">\n    <div class=\"download\">\n      <a href=\"data/evictions_and_courts.csv\" download>Download data <i class=\"bi bi-download\"></i></a>\n    </div>\n  </div>\n    \n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\niconList <- iconList(\n  jp1  = makeIcon(\"www/svgs/jp-1.svg\", \"www/svgs/jp-1.svg\", 24, 24),\n  jp2  = makeIcon(\"www/svgs/jp-2.svg\", \"www/svgs/jp-2.svg\", 24, 24),\n  jp3  = makeIcon(\"www/svgs/jp-3.svg\", \"www/svgs/jp-3.svg\", 24, 24),\n  jp4  = makeIcon(\"www/svgs/jp-4.svg\", \"www/svgs/jp-4.svg\", 24, 24),\n  jp5  = makeIcon(\"www/svgs/jp-5.svg\", \"www/svgs/jp-5.svg\", 24, 24)\n)\n\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  # addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addMapPane(\"back\", zIndex = 410) %>%\n  addMapPane(\"mid\", zIndex = 415) %>%\n  addMapPane(\"front\", zIndex = 420) %>%\n  addMapPane(\"veryfront\", zIndex = 425) %>%\n  addPolygons(\n    data = dallas_co,\n    fillColor = cpaltemplates::palette_cpal_gray[8],\n    fillOpacity = 0.1, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"mid\")\n  ) %>%\n  leaflet::addPolylines(\n    group = \"JP locations\",\n    data = jpbounds_inner,\n    fillColor = cpaltemplates::palette_cpal_gray[8],\n    fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"mid\")\n  ) %>%\n  addPolygons(\n    group = \"Drive time zones\",\n    data = isochrone,\n    fillColor = '#9c64f7',\n    fillOpacity = ~opa, \n    weight = 1, \n    color = cpaltemplates::palette_cpal_gray[8],\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F, pane = \"back\")\n  ) %>%\n  addMarkers(\n    group = \"JP locations\",\n    data = jpcourts,\n    icon = ~iconList[Court],\n    options = pathOptions(pane = \"veryfront\")\n  ) %>%\n  addCircleMarkers(\n    group = levels(df$group)[2],\n    data = df %>% filter(show == 2),\n    radius = 2,\n    stroke = FALSE,\n    color = ~gfill,\n    fillOpacity = 0.3,\n    options = pathOptions(pane = \"front\")\n  ) %>%\n  addCircleMarkers(\n    group = levels(df$group)[1],\n    data = df %>% filter(show == 1),\n    radius = 2,\n    stroke = FALSE,\n    color = ~gfill,\n    fillOpacity = 0.3,\n    options = pathOptions(pane = \"front\")\n  ) %>%\n  addLegend(\n    \"bottomright\",\n    pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),\n    values = isochrone$time,\n    title = \"Driving distance (min)\",\n    opacity = 1\n  ) %>%\n  addLayersControl(\n    baseGroups = c(levels(df$group)),\n    overlayGroups = c(\"Drive time zones\", \"JP locations\"),\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])  \n\n```\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["www/javascript/script.html"],"toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"pagetitle":"Evictions and Courts Map"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}