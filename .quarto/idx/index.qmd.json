{"title":"vendors <- readxl::read_excel(","markdown":{"yaml":{"pagetitle":"Evictions and Courts Map","format":"html"},"headingText":"vendors <- readxl::read_excel(","containsRefs":false,"markdown":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\n\n#   \"C:/Users/taylo/CPAL Dropbox/Analytics/Projects + Requests/External Requests/Impact Ventures/Business by Race/Comptroller State Approved Vendors.xlsx\",\n#   sheet = \"DallasCountyVendors\")\n# \n# vendorsGC <- vendors %>%\n#   mutate(`Mailing Address` = if_else(str_detect(`Mailing Address`, \",$\"), \n#                                    `Mailing Address`, \n#                                    str_c(`Mailing Address`, \",\")),\n#          address = paste0(`Mailing Address`, \" \", `City`, \", \", `State`, \" \", `ZIP5`, \", \", `Country`)) %>%\n#   tidygeocoder::geocode(address, method = \"arcgis\")\n# \n# write_csv(vendorsGC, \"data/geocoded_vendors.csv\")\n\ndallas_co <- sf::read_sf(\"data/dallas_co.geojson\")\n# dallas_co <- tigris::counties(state = \"TX\") %>%\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\njpcourts <- read_csv(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\") %>%\n  mutate(Court = paste0(\"jp\", str_sub(`Court/Precinct`, 4, 4))) %>%\n  sf::st_as_sf(coords = c(\"long\", \"lat\"))\n# jpcourts_geo <- jpcourts %>%\n#   tidygeocoder::geocode(Address, method = \"arcgis\", lat = lat, long = long)\n# write_csv(jpcourts_geo, \"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\")\n\n\nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nevictions <- arrow::read_parquet(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet\")[-1,]\n\ngooglesheets4::gs4_auth(email = \"taylor@childpovertyactionlab.org\")\n\nobs <- googlesheets4::read_sheet(ss = \"https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk\",\n                               sheet = \"Form Responses 1\") %>%\n  janitor::clean_names(.) %>%\n  rename(\"timeStamp\"=\"timestamp\",\n         \"observer\"=\"observer\",\n         \"observationDate\"=\"date_of_observation\",\n         \"jpCourt\"=\"justice_of_the_peace_court\",\n         \"docketStart\"=\"docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am\",\n         \"docketEnd\"=\"docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm\",\n         \"caseType\"=\"is_this_a_commercial_or_residential_eviction_case\",\n         \"plaintiffName\"=\"plaintiff_landlord_name\",\n         \"plaintiffDesignee\"=\"did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear\",\n         \"plaintiffRep\"=\"did_the_plaintiff_landlord_have_additional_representation_of_some_kind\",\n         \"defName\"=\"defendant_tenant_name\",\n         \"defAppear\"=\"did_the_defendant_tenant_appear\",\n         \"defRep\"=\"did_the_defendant_tenant_have_additional_representation_of_some_kind\",\n         \"evicReason\"=\"reason_for_eviction_select_multiple_if_applicable\",\n         \"totalOwned\"=\"total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50\",\n         \"noticeVacate\"=\"was_there_any_discussion_about_the_notice_to_vacate_ntv\",\n         \"noticeConfirm\"=\"if_yes_did_the_judge_confirm_the_ntv\",\n         \"jpRuled\"=\"the_jp_ruled_in_favor_of\",\n         \"outcomeOther\"=\"if_you_selected_other_please_specify_the_outcome_of_the_case_below\",\n         \"otherNotes\"=\"additional_case_notes\"\n  ) %>%\n  filter(\n    # !jpCourt %in% c(\"5-2\", \"3-2\", \"2-1\"),\n    !is.na(jpCourt),\n    observationDate <= today()\n  ) %>%\n  mutate(jpCourt = paste(\"Court\", jpCourt)) %>%\n  filter(!is.na(jpCourt)) %>%\n  mutate(jpRuled = factor(\n    jpRuled, \n    levels =\n        c(\"Plaintiff (landlord)\",\n          \"Plaintiff by default (defendant no-show)\",\n          \"Defendant (tenant)\",\n          \"Defendant by default (plaintiff no-show)\",\n          \"The case was abated or reset/rescheduled to a later date.\",\n          \"The case was dismissed.\",\n          \"Other\",\n          \"Unknown\"\n        )\n      )\n    # labels = \n    #   c(\n    #     \"Plaintiff (landlord)\" = \"Plaintiff (landlord)\",\n    #     \"Plaintiff by default (defendant no-show)\" = \"Plaintiff by default (defendant no-show)\",\n    #     \"Unknown\" = \"Unknown\",\n    #     \"Defendant (tenant)\" = \"Defendant (tenant)\",\n    #     \"Other\" = \"Other\",\n    #     \"Defendant by default (plaintiff no-show)\" = \"Defendant by default (plaintiff no-show)\",\n    #     \"The case was abated or reset/rescheduled to a later date.\" = \"The case was abated or rescheduled\",\n    #     \"The case was dismissed.\" = \"The case was dismissed\"\n    #   )\n  )\n\n  # mutate(outcomeParty = case_when(\n  #   str_detect(jpRuled, \"Plaintiff\") ~ \"Ruled in Favor of Landlord\",\n  #   str_detect(jpRuled, \"Defendant\") ~ \"Ruled in Favor of Tenant\",\n  #   str_detect(jpRuled, \"abated\") ~ \"Abated\",\n  #   str_detect(jpRuled, \"dismissed\") ~ \"Dismissed\",\n  #   TRUE ~ jpRuled\n  # ))\n\n# outcomes <- obs %>%\n#   group_by(jpCourt, outcomeParty, defAppear) %>%\n#   summarize(count = n()) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup(.) %>%\n#   group_by(outcomeParty) %>%\n#   group_map(~ .x %>%\n#           janitor::adorn_totals(),.keep = T) %>% \n#   bind_rows() %>%\n#   mutate(test = lag(outcomeParty),\n#          outcomeParty = ifelse(str_detect(outcomeParty, \"Other|Dismissed|Abated|Ruled|Unknown\"), outcomeParty, test)) %>%\n#   select(-test) %>%\n#   group_by(jpCourt) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup()\n\n\ndf0 <- evictions %>%\n  right_join(obs, by = c(\"case_number\"), suffix = c(\"\", \"_obs\")) %>%\n  filter(jpRuled %in%\n    c(\"Plaintiff (landlord)\",\n      \"Plaintiff by default (defendant no-show)\")) %>%\n  mutate(\n    show = case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ 1,\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ 2,\n      TRUE ~ NA\n    ))\n\nct <- NULL\nct$showcount <- nrow(df0 %>% filter(show == 1))\nct$noshowcount <- nrow(df0 %>% filter(show == 2))\n\n\ndf <- df0 %>%\n  mutate(\n    group = factor(case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ paste0(\"Defendant did not appear (\", ct$noshowcount, \")\"),\n      TRUE ~ NA\n    ), levels = c(\n      paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      paste0(\"Defendant did not appear (\", ct$noshowcount, \")\")\n    )),\n    lng = jitter(as.numeric(X), 0.001),\n    lat = jitter(as.numeric(Y), 0.001)\n  ) %>%\n  filter(!is.na(lng), !is.na(lat)) %>%\n  sf::st_as_sf(coords = c(\"lng\", \"lat\")) %>%\n  sf::st_set_crs(4326)\n\n\n# Sys.setenv(TRAVELTIME_ID = \"a32357bc\")\n# Sys.setenv(TRAVELTIME_KEY = \"54f2709a6a34ed2e52af85c0acd2cb0d\")\n\n# dateTime <- strftime(as.POSIXlt(Sys.time(), \"UTC\"), \"%Y-%m-%dT%H:%M:%SZ\")\n# arrTime <- strftime(\"2024-01-08T09:30:00Z\", \"%Y-%m-%dT%H:%M:%SZ\")\n# \n# arrival_searches <- map2(\n#   jpcourts$`Court/Precinct`, \n#   jpcourts$`geometry`, \n#   ~ tibble(\n#                 id = paste(.x), \n#                 coords = list(list(lat = sf::st_coordinates(.y)[2], \n#                                    lng = sf::st_coordinates(.y)[1])),\n#                 travel_time = 900,\n#                 departure_time = NA,\n#                 arrival_time = arrTime,\n#                 coords.1 = NA,\n#                 transportation = list(list(type = \"driving\")),\n#                 range = list(list(enabled = T, width = 3600))\n#               ) %>%\n#     bind_rows()\n#   )\n# \n# union = traveltimeR::make_union_intersect(\n#   id = \"drive time to JP court\",\n#   search_ids = list(jpcourts$`Court/Precinct`)\n# )\n# \n# union = list(list(\n#   id = \"drive time to JP court\",\n#   search_ids = jpcourts$`Court/Precinct`\n# ))\n# \n# \n# isochrones <-\n#   traveltimeR::time_map(\n#     arrival_searches = arrival_searches,\n#     unions = union\n#   )\n# \n# jsonlite::write_json(result$contentJSON, \"data/isochrones.json\")\n\nisochrones <- jsonlite::fromJSON(jsonlite::fromJSON(\"data/isochrones.json\"))\n\nfinal_shapes <- list()\nfinal_shells <- list()\n\n# Process each shape\nfor (i in seq_along(isochrones$results$shapes)) {\n  # Process each shell in the shape\n  for (j in seq_along(isochrones$results$shapes[[i]]$shell)) {\n    shell <- st_as_sf(isochrones$results$shapes[[i]]$shell[[j]], coords = c(\"lng\", \"lat\"), crs = 4326) %>%\n      summarize(geometry = st_combine(geometry)) %>%      \n      st_cast(\"POLYGON\")\n\n    # Process each hole in the shell\n    # for (k in seq_along(isochrones$results$shapes[[i]]$hole[[j]])) {\n    #   hole <- st_as_sf(isochrones$results$shapes[[i]]$hole[[j]][[k]], coords = c(\"lng\", \"lat\"), crs = 4326) %>%\n    #     summarize(geometry = st_combine(geometry)) %>%      \n    #     st_cast(\"POLYGON\")\n    # \n    #   # Subtract hole from shell\n    #   shell <- st_difference(shell, hole)\n    # }\n    \n    # Add the processed shell to the final_shapes list\n    final_shells[[j]] <- shell\n  }\n  \n  class(final_shells)\n  \n  shape <- bind_rows(final_shells) %>%\n    summarize_all(first) %>%\n    mutate(search_id = isochrones$results$search_id[[i]])\n  \n  final_shapes[[i]] <- shape\n  final_shells <- list()\n}\n\nfinal_sdf <- bind_rows(final_shapes)\n\n\n# count_vendor <- scales::comma(length(unique(vendors$`Vendor ID`)))\n# \n# count_black <- scales::comma(nrow(vendors %>% filter(HUB == \"Black\")))\n# count_asian <- scales::comma(nrow(vendors %>% filter(HUB == \"Asian\")))\n# count_hispanic <- scales::comma(nrow(vendors %>% filter(HUB == \"Hispanic\")))\n# count_native <- scales::comma(nrow(vendors %>% filter(HUB == \"Native American\")))\n# count_women <- scales::comma(nrow(vendors %>% filter(HUB == \"Women Owned\")))\n# count_veteran <- scales::comma(nrow(vendors %>% filter(HUB == \"Disabled Veteran\")))\n\n\nmap_palette <- c(\"#008097\", \"#ED683F\", \"#EACA2D\", \"#5C2B1C\", \"#ED018C\", \"#185411\")\n\n```\n\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n\n  <div class=\"card-side\" style=\"width: 94%;\">\n\n    <div class=\"subtext\">\n      &#8212; Texas Comptroller (2023)\n    </div>\n  </div>\n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\niconList <- iconList(\n  jp1  = makeIcon(\"www/svgs/jp-1.svg\", \"www/svgs/jp-1.svg\", 24, 24),\n  jp2  = makeIcon(\"www/svgs/jp-2.svg\", \"www/svgs/jp-2.svg\", 24, 24),\n  jp3  = makeIcon(\"www/svgs/jp-3.svg\", \"www/svgs/jp-3.svg\", 24, 24),\n  jp4  = makeIcon(\"www/svgs/jp-4.svg\", \"www/svgs/jp-4.svg\", 24, 24),\n  jp5  = makeIcon(\"www/svgs/jp-5.svg\", \"www/svgs/jp-5.svg\", 24, 24)\n)\n\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addPolygons(\n    data = dallas_co,\n    fillColor = \"#333333\",\n    fillOpacity = 0.03, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addPolygons(\n    data = final_sdf,\n    fillColor = \"#fcba03\",\n    fillOpacity = 0.3, weight = 2, color = \"#fcba03\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addMarkers(\n    data = jpcourts,\n    icon = ~iconList[Court],\n  ) %>%\n  addCircleMarkers(\n    group = df$group[2],\n    data = df %>% filter(show == 2),\n    radius = 4,\n    stroke = FALSE,\n    color = \"#c22d23\",\n    fillOpacity = 0.3\n  ) %>%\n  addCircleMarkers(\n    group = df$group[1],\n    data = df %>% filter(show == 1),\n    radius = 4,\n    stroke = FALSE,\n    color = \"#32a852\",\n    fillOpacity = 0.3\n  ) %>%\n  # addLegend(\n  #   \"topright\",\n  #   pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),\n  #   values = ~HUB,\n  #   title = \"HUB Eligibility\",\n  #   opacity = 0.7\n  # ) %>%\n  addLayersControl(\n    overlayGroups = levels(df$group),\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```","srcMarkdownNoYaml":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\n\n# vendors <- readxl::read_excel(\n#   \"C:/Users/taylo/CPAL Dropbox/Analytics/Projects + Requests/External Requests/Impact Ventures/Business by Race/Comptroller State Approved Vendors.xlsx\",\n#   sheet = \"DallasCountyVendors\")\n# \n# vendorsGC <- vendors %>%\n#   mutate(`Mailing Address` = if_else(str_detect(`Mailing Address`, \",$\"), \n#                                    `Mailing Address`, \n#                                    str_c(`Mailing Address`, \",\")),\n#          address = paste0(`Mailing Address`, \" \", `City`, \", \", `State`, \" \", `ZIP5`, \", \", `Country`)) %>%\n#   tidygeocoder::geocode(address, method = \"arcgis\")\n# \n# write_csv(vendorsGC, \"data/geocoded_vendors.csv\")\n\ndallas_co <- sf::read_sf(\"data/dallas_co.geojson\")\n# dallas_co <- tigris::counties(state = \"TX\") %>%\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\njpcourts <- read_csv(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\") %>%\n  mutate(Court = paste0(\"jp\", str_sub(`Court/Precinct`, 4, 4))) %>%\n  sf::st_as_sf(coords = c(\"long\", \"lat\"))\n# jpcourts_geo <- jpcourts %>%\n#   tidygeocoder::geocode(Address, method = \"arcgis\", lat = lat, long = long)\n# write_csv(jpcourts_geo, \"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv\")\n\n\nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nevictions <- arrow::read_parquet(\"C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet\")[-1,]\n\ngooglesheets4::gs4_auth(email = \"taylor@childpovertyactionlab.org\")\n\nobs <- googlesheets4::read_sheet(ss = \"https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk\",\n                               sheet = \"Form Responses 1\") %>%\n  janitor::clean_names(.) %>%\n  rename(\"timeStamp\"=\"timestamp\",\n         \"observer\"=\"observer\",\n         \"observationDate\"=\"date_of_observation\",\n         \"jpCourt\"=\"justice_of_the_peace_court\",\n         \"docketStart\"=\"docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am\",\n         \"docketEnd\"=\"docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm\",\n         \"caseType\"=\"is_this_a_commercial_or_residential_eviction_case\",\n         \"plaintiffName\"=\"plaintiff_landlord_name\",\n         \"plaintiffDesignee\"=\"did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear\",\n         \"plaintiffRep\"=\"did_the_plaintiff_landlord_have_additional_representation_of_some_kind\",\n         \"defName\"=\"defendant_tenant_name\",\n         \"defAppear\"=\"did_the_defendant_tenant_appear\",\n         \"defRep\"=\"did_the_defendant_tenant_have_additional_representation_of_some_kind\",\n         \"evicReason\"=\"reason_for_eviction_select_multiple_if_applicable\",\n         \"totalOwned\"=\"total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50\",\n         \"noticeVacate\"=\"was_there_any_discussion_about_the_notice_to_vacate_ntv\",\n         \"noticeConfirm\"=\"if_yes_did_the_judge_confirm_the_ntv\",\n         \"jpRuled\"=\"the_jp_ruled_in_favor_of\",\n         \"outcomeOther\"=\"if_you_selected_other_please_specify_the_outcome_of_the_case_below\",\n         \"otherNotes\"=\"additional_case_notes\"\n  ) %>%\n  filter(\n    # !jpCourt %in% c(\"5-2\", \"3-2\", \"2-1\"),\n    !is.na(jpCourt),\n    observationDate <= today()\n  ) %>%\n  mutate(jpCourt = paste(\"Court\", jpCourt)) %>%\n  filter(!is.na(jpCourt)) %>%\n  mutate(jpRuled = factor(\n    jpRuled, \n    levels =\n        c(\"Plaintiff (landlord)\",\n          \"Plaintiff by default (defendant no-show)\",\n          \"Defendant (tenant)\",\n          \"Defendant by default (plaintiff no-show)\",\n          \"The case was abated or reset/rescheduled to a later date.\",\n          \"The case was dismissed.\",\n          \"Other\",\n          \"Unknown\"\n        )\n      )\n    # labels = \n    #   c(\n    #     \"Plaintiff (landlord)\" = \"Plaintiff (landlord)\",\n    #     \"Plaintiff by default (defendant no-show)\" = \"Plaintiff by default (defendant no-show)\",\n    #     \"Unknown\" = \"Unknown\",\n    #     \"Defendant (tenant)\" = \"Defendant (tenant)\",\n    #     \"Other\" = \"Other\",\n    #     \"Defendant by default (plaintiff no-show)\" = \"Defendant by default (plaintiff no-show)\",\n    #     \"The case was abated or reset/rescheduled to a later date.\" = \"The case was abated or rescheduled\",\n    #     \"The case was dismissed.\" = \"The case was dismissed\"\n    #   )\n  )\n\n  # mutate(outcomeParty = case_when(\n  #   str_detect(jpRuled, \"Plaintiff\") ~ \"Ruled in Favor of Landlord\",\n  #   str_detect(jpRuled, \"Defendant\") ~ \"Ruled in Favor of Tenant\",\n  #   str_detect(jpRuled, \"abated\") ~ \"Abated\",\n  #   str_detect(jpRuled, \"dismissed\") ~ \"Dismissed\",\n  #   TRUE ~ jpRuled\n  # ))\n\n# outcomes <- obs %>%\n#   group_by(jpCourt, outcomeParty, defAppear) %>%\n#   summarize(count = n()) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup(.) %>%\n#   group_by(outcomeParty) %>%\n#   group_map(~ .x %>%\n#           janitor::adorn_totals(),.keep = T) %>% \n#   bind_rows() %>%\n#   mutate(test = lag(outcomeParty),\n#          outcomeParty = ifelse(str_detect(outcomeParty, \"Other|Dismissed|Abated|Ruled|Unknown\"), outcomeParty, test)) %>%\n#   select(-test) %>%\n#   group_by(jpCourt) %>%\n#   mutate(perOutcome = count/sum(count)) %>%\n#   ungroup()\n\n\ndf0 <- evictions %>%\n  right_join(obs, by = c(\"case_number\"), suffix = c(\"\", \"_obs\")) %>%\n  filter(jpRuled %in%\n    c(\"Plaintiff (landlord)\",\n      \"Plaintiff by default (defendant no-show)\")) %>%\n  mutate(\n    show = case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ 1,\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ 2,\n      TRUE ~ NA\n    ))\n\nct <- NULL\nct$showcount <- nrow(df0 %>% filter(show == 1))\nct$noshowcount <- nrow(df0 %>% filter(show == 2))\n\n\ndf <- df0 %>%\n  mutate(\n    group = factor(case_when(\n      jpRuled == \"Plaintiff (landlord)\" ~ paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      jpRuled == \"Plaintiff by default (defendant no-show)\" ~ paste0(\"Defendant did not appear (\", ct$noshowcount, \")\"),\n      TRUE ~ NA\n    ), levels = c(\n      paste0(\"Defendant appeared (\", ct$showcount, \")\"),\n      paste0(\"Defendant did not appear (\", ct$noshowcount, \")\")\n    )),\n    lng = jitter(as.numeric(X), 0.001),\n    lat = jitter(as.numeric(Y), 0.001)\n  ) %>%\n  filter(!is.na(lng), !is.na(lat)) %>%\n  sf::st_as_sf(coords = c(\"lng\", \"lat\")) %>%\n  sf::st_set_crs(4326)\n\n\n# Sys.setenv(TRAVELTIME_ID = \"a32357bc\")\n# Sys.setenv(TRAVELTIME_KEY = \"54f2709a6a34ed2e52af85c0acd2cb0d\")\n\n# dateTime <- strftime(as.POSIXlt(Sys.time(), \"UTC\"), \"%Y-%m-%dT%H:%M:%SZ\")\n# arrTime <- strftime(\"2024-01-08T09:30:00Z\", \"%Y-%m-%dT%H:%M:%SZ\")\n# \n# arrival_searches <- map2(\n#   jpcourts$`Court/Precinct`, \n#   jpcourts$`geometry`, \n#   ~ tibble(\n#                 id = paste(.x), \n#                 coords = list(list(lat = sf::st_coordinates(.y)[2], \n#                                    lng = sf::st_coordinates(.y)[1])),\n#                 travel_time = 900,\n#                 departure_time = NA,\n#                 arrival_time = arrTime,\n#                 coords.1 = NA,\n#                 transportation = list(list(type = \"driving\")),\n#                 range = list(list(enabled = T, width = 3600))\n#               ) %>%\n#     bind_rows()\n#   )\n# \n# union = traveltimeR::make_union_intersect(\n#   id = \"drive time to JP court\",\n#   search_ids = list(jpcourts$`Court/Precinct`)\n# )\n# \n# union = list(list(\n#   id = \"drive time to JP court\",\n#   search_ids = jpcourts$`Court/Precinct`\n# ))\n# \n# \n# isochrones <-\n#   traveltimeR::time_map(\n#     arrival_searches = arrival_searches,\n#     unions = union\n#   )\n# \n# jsonlite::write_json(result$contentJSON, \"data/isochrones.json\")\n\nisochrones <- jsonlite::fromJSON(jsonlite::fromJSON(\"data/isochrones.json\"))\n\nfinal_shapes <- list()\nfinal_shells <- list()\n\n# Process each shape\nfor (i in seq_along(isochrones$results$shapes)) {\n  # Process each shell in the shape\n  for (j in seq_along(isochrones$results$shapes[[i]]$shell)) {\n    shell <- st_as_sf(isochrones$results$shapes[[i]]$shell[[j]], coords = c(\"lng\", \"lat\"), crs = 4326) %>%\n      summarize(geometry = st_combine(geometry)) %>%      \n      st_cast(\"POLYGON\")\n\n    # Process each hole in the shell\n    # for (k in seq_along(isochrones$results$shapes[[i]]$hole[[j]])) {\n    #   hole <- st_as_sf(isochrones$results$shapes[[i]]$hole[[j]][[k]], coords = c(\"lng\", \"lat\"), crs = 4326) %>%\n    #     summarize(geometry = st_combine(geometry)) %>%      \n    #     st_cast(\"POLYGON\")\n    # \n    #   # Subtract hole from shell\n    #   shell <- st_difference(shell, hole)\n    # }\n    \n    # Add the processed shell to the final_shapes list\n    final_shells[[j]] <- shell\n  }\n  \n  class(final_shells)\n  \n  shape <- bind_rows(final_shells) %>%\n    summarize_all(first) %>%\n    mutate(search_id = isochrones$results$search_id[[i]])\n  \n  final_shapes[[i]] <- shape\n  final_shells <- list()\n}\n\nfinal_sdf <- bind_rows(final_shapes)\n\n\n# count_vendor <- scales::comma(length(unique(vendors$`Vendor ID`)))\n# \n# count_black <- scales::comma(nrow(vendors %>% filter(HUB == \"Black\")))\n# count_asian <- scales::comma(nrow(vendors %>% filter(HUB == \"Asian\")))\n# count_hispanic <- scales::comma(nrow(vendors %>% filter(HUB == \"Hispanic\")))\n# count_native <- scales::comma(nrow(vendors %>% filter(HUB == \"Native American\")))\n# count_women <- scales::comma(nrow(vendors %>% filter(HUB == \"Women Owned\")))\n# count_veteran <- scales::comma(nrow(vendors %>% filter(HUB == \"Disabled Veteran\")))\n\n\nmap_palette <- c(\"#008097\", \"#ED683F\", \"#EACA2D\", \"#5C2B1C\", \"#ED018C\", \"#185411\")\n\n```\n\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n\n  <div class=\"card-side\" style=\"width: 94%;\">\n\n    <div class=\"subtext\">\n      &#8212; Texas Comptroller (2023)\n    </div>\n  </div>\n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\niconList <- iconList(\n  jp1  = makeIcon(\"www/svgs/jp-1.svg\", \"www/svgs/jp-1.svg\", 24, 24),\n  jp2  = makeIcon(\"www/svgs/jp-2.svg\", \"www/svgs/jp-2.svg\", 24, 24),\n  jp3  = makeIcon(\"www/svgs/jp-3.svg\", \"www/svgs/jp-3.svg\", 24, 24),\n  jp4  = makeIcon(\"www/svgs/jp-4.svg\", \"www/svgs/jp-4.svg\", 24, 24),\n  jp5  = makeIcon(\"www/svgs/jp-5.svg\", \"www/svgs/jp-5.svg\", 24, 24)\n)\n\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addPolygons(\n    data = dallas_co,\n    fillColor = \"#333333\",\n    fillOpacity = 0.03, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addPolygons(\n    data = final_sdf,\n    fillColor = \"#fcba03\",\n    fillOpacity = 0.3, weight = 2, color = \"#fcba03\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addMarkers(\n    data = jpcourts,\n    icon = ~iconList[Court],\n  ) %>%\n  addCircleMarkers(\n    group = df$group[2],\n    data = df %>% filter(show == 2),\n    radius = 4,\n    stroke = FALSE,\n    color = \"#c22d23\",\n    fillOpacity = 0.3\n  ) %>%\n  addCircleMarkers(\n    group = df$group[1],\n    data = df %>% filter(show == 1),\n    radius = 4,\n    stroke = FALSE,\n    color = \"#32a852\",\n    fillOpacity = 0.3\n  ) %>%\n  # addLegend(\n  #   \"topright\",\n  #   pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),\n  #   values = ~HUB,\n  #   title = \"HUB Eligibility\",\n  #   opacity = 0.7\n  # ) %>%\n  addLayersControl(\n    overlayGroups = levels(df$group),\n    position = \"topright\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"pagetitle":"Evictions and Courts Map"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}