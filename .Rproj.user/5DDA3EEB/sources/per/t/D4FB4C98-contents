---
pagetitle: "Evictions and Courts Map"
format: html
---

```{r setup, output = F, echo = F}

library(tidycensus)
library(sf)
require(tidyverse)
library(leaflet)
library(traveltimeR)

# vendors <- readxl::read_excel(
#   "C:/Users/taylo/CPAL Dropbox/Analytics/Projects + Requests/External Requests/Impact Ventures/Business by Race/Comptroller State Approved Vendors.xlsx",
#   sheet = "DallasCountyVendors")
# 
# vendorsGC <- vendors %>%
#   mutate(`Mailing Address` = if_else(str_detect(`Mailing Address`, ",$"), 
#                                    `Mailing Address`, 
#                                    str_c(`Mailing Address`, ",")),
#          address = paste0(`Mailing Address`, " ", `City`, ", ", `State`, " ", `ZIP5`, ", ", `Country`)) %>%
#   tidygeocoder::geocode(address, method = "arcgis")
# 
# write_csv(vendorsGC, "data/geocoded_vendors.csv")

dallas_co <- sf::read_sf("data/dallas_co.geojson")
# dallas_co <- tigris::counties(state = "TX") %>%
#   filter(NAME == "Dallas")
# sf::write_sf(dallas_co, "data/dallas_co.geojson")

jpcourts <- read_csv("C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv") %>%
  mutate(Court = paste0("jp", str_sub(`Court/Precinct`, 4, 4))) %>%
  sf::st_as_sf(coords = c("long", "lat"))
# jpcourts_geo <- jpcourts %>%
#   tidygeocoder::geocode(Address, method = "arcgis", lat = lat, long = long)
# write_csv(jpcourts_geo, "C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv")


bounds <- sf::st_bbox(dallas_co)

expanded_bounds <- as.vector(c(
  xmin = bounds["xmin"] - 0.25, 
  ymin = bounds["ymin"] - 0.25, 
  xmax = bounds["xmax"] + 0.25, 
  ymax = bounds["ymax"] + 0.25
))


evictions <- arrow::read_parquet("C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet")[-1,]

googlesheets4::gs4_auth(email = "taylor@childpovertyactionlab.org")

obs <- googlesheets4::read_sheet(ss = "https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk",
                               sheet = "Form Responses 1") %>%
  janitor::clean_names(.) %>%
  rename("timeStamp"="timestamp",
         "observer"="observer",
         "observationDate"="date_of_observation",
         "jpCourt"="justice_of_the_peace_court",
         "docketStart"="docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am",
         "docketEnd"="docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm",
         "caseType"="is_this_a_commercial_or_residential_eviction_case",
         "plaintiffName"="plaintiff_landlord_name",
         "plaintiffDesignee"="did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear",
         "plaintiffRep"="did_the_plaintiff_landlord_have_additional_representation_of_some_kind",
         "defName"="defendant_tenant_name",
         "defAppear"="did_the_defendant_tenant_appear",
         "defRep"="did_the_defendant_tenant_have_additional_representation_of_some_kind",
         "evicReason"="reason_for_eviction_select_multiple_if_applicable",
         "totalOwned"="total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50",
         "noticeVacate"="was_there_any_discussion_about_the_notice_to_vacate_ntv",
         "noticeConfirm"="if_yes_did_the_judge_confirm_the_ntv",
         "jpRuled"="the_jp_ruled_in_favor_of",
         "outcomeOther"="if_you_selected_other_please_specify_the_outcome_of_the_case_below",
         "otherNotes"="additional_case_notes"
  ) %>%
  filter(
    # !jpCourt %in% c("5-2", "3-2", "2-1"),
    !is.na(jpCourt),
    observationDate <= today()
  ) %>%
  mutate(jpCourt = paste("Court", jpCourt)) %>%
  filter(!is.na(jpCourt)) %>%
  mutate(jpRuled = factor(
    jpRuled, 
    levels =
        c("Plaintiff (landlord)",
          "Plaintiff by default (defendant no-show)",
          "Defendant (tenant)",
          "Defendant by default (plaintiff no-show)",
          "The case was abated or reset/rescheduled to a later date.",
          "The case was dismissed.",
          "Other",
          "Unknown"
        )
      )
    # labels = 
    #   c(
    #     "Plaintiff (landlord)" = "Plaintiff (landlord)",
    #     "Plaintiff by default (defendant no-show)" = "Plaintiff by default (defendant no-show)",
    #     "Unknown" = "Unknown",
    #     "Defendant (tenant)" = "Defendant (tenant)",
    #     "Other" = "Other",
    #     "Defendant by default (plaintiff no-show)" = "Defendant by default (plaintiff no-show)",
    #     "The case was abated or reset/rescheduled to a later date." = "The case was abated or rescheduled",
    #     "The case was dismissed." = "The case was dismissed"
    #   )
  )

  # mutate(outcomeParty = case_when(
  #   str_detect(jpRuled, "Plaintiff") ~ "Ruled in Favor of Landlord",
  #   str_detect(jpRuled, "Defendant") ~ "Ruled in Favor of Tenant",
  #   str_detect(jpRuled, "abated") ~ "Abated",
  #   str_detect(jpRuled, "dismissed") ~ "Dismissed",
  #   TRUE ~ jpRuled
  # ))

# outcomes <- obs %>%
#   group_by(jpCourt, outcomeParty, defAppear) %>%
#   summarize(count = n()) %>%
#   mutate(perOutcome = count/sum(count)) %>%
#   ungroup(.) %>%
#   group_by(outcomeParty) %>%
#   group_map(~ .x %>%
#           janitor::adorn_totals(),.keep = T) %>% 
#   bind_rows() %>%
#   mutate(test = lag(outcomeParty),
#          outcomeParty = ifelse(str_detect(outcomeParty, "Other|Dismissed|Abated|Ruled|Unknown"), outcomeParty, test)) %>%
#   select(-test) %>%
#   group_by(jpCourt) %>%
#   mutate(perOutcome = count/sum(count)) %>%
#   ungroup()


df0 <- evictions %>%
  right_join(obs, by = c("case_number"), suffix = c("", "_obs")) %>%
  filter(jpRuled %in%
    c("Plaintiff (landlord)",
      "Plaintiff by default (defendant no-show)")) %>%
  mutate(
    show = case_when(
      jpRuled == "Plaintiff (landlord)" ~ 1,
      jpRuled == "Plaintiff by default (defendant no-show)" ~ 2,
      TRUE ~ NA
    ))

ct <- NULL
ct$showcount <- nrow(df0 %>% filter(show == 1))
ct$noshowcount <- nrow(df0 %>% filter(show == 2))


df <- df0 %>%
  mutate(
    group = factor(case_when(
      jpRuled == "Plaintiff (landlord)" ~ paste0("Defendant appeared (", ct$showcount, ")"),
      jpRuled == "Plaintiff by default (defendant no-show)" ~ paste0("Defendant did not appear (", ct$noshowcount, ")"),
      TRUE ~ NA
    ), levels = c(
      paste0("Defendant appeared (", ct$showcount, ")"),
      paste0("Defendant did not appear (", ct$noshowcount, ")")
    )),
    lng = jitter(as.numeric(X), 0.001),
    lat = jitter(as.numeric(Y), 0.001)
  ) %>%
  filter(!is.na(lng), !is.na(lat)) %>%
  sf::st_as_sf(coords = c("lng", "lat")) %>%
  sf::st_set_crs(4326)


# Sys.setenv(TRAVELTIME_ID = "a32357bc")
# Sys.setenv(TRAVELTIME_KEY = "54f2709a6a34ed2e52af85c0acd2cb0d")

# dateTime <- strftime(as.POSIXlt(Sys.time(), "UTC"), "%Y-%m-%dT%H:%M:%SZ")
# arrTime <- strftime("2024-01-08T09:30:00Z", "%Y-%m-%dT%H:%M:%SZ")
# 
# arrival_searches <- map2(
#   jpcourts$`Court/Precinct`, 
#   jpcourts$`geometry`, 
#   ~ tibble(
#                 id = paste(.x), 
#                 coords = list(list(lat = sf::st_coordinates(.y)[2], 
#                                    lng = sf::st_coordinates(.y)[1])),
#                 travel_time = 900,
#                 departure_time = NA,
#                 arrival_time = arrTime,
#                 coords.1 = NA,
#                 transportation = list(list(type = "driving")),
#                 range = list(list(enabled = T, width = 3600))
#               ) %>%
#     bind_rows()
#   )
# 
# union = traveltimeR::make_union_intersect(
#   id = "drive time to JP court",
#   search_ids = list(jpcourts$`Court/Precinct`)
# )
# 
# union = list(list(
#   id = "drive time to JP court",
#   search_ids = jpcourts$`Court/Precinct`
# ))
# 
# 
# isochrones <-
#   traveltimeR::time_map(
#     arrival_searches = arrival_searches,
#     unions = union
#   )
# 
# jsonlite::write_json(result$contentJSON, "data/isochrones.json")

isochrones <- jsonlite::fromJSON(jsonlite::fromJSON("data/isochrones.json"))

final_shapes <- list()
final_shells <- list()

# Process each shape
for (i in seq_along(isochrones$results$shapes)) {
  # Process each shell in the shape
  for (j in seq_along(isochrones$results$shapes[[i]]$shell)) {
    shell <- st_as_sf(isochrones$results$shapes[[i]]$shell[[j]], coords = c("lng", "lat"), crs = 4326) %>%
      summarize(geometry = st_combine(geometry)) %>%      
      st_cast("POLYGON")

    # Process each hole in the shell
    # for (k in seq_along(isochrones$results$shapes[[i]]$hole[[j]])) {
    #   hole <- st_as_sf(isochrones$results$shapes[[i]]$hole[[j]][[k]], coords = c("lng", "lat"), crs = 4326) %>%
    #     summarize(geometry = st_combine(geometry)) %>%      
    #     st_cast("POLYGON")
    # 
    #   # Subtract hole from shell
    #   shell <- st_difference(shell, hole)
    # }
    
    # Add the processed shell to the final_shapes list
    final_shells[[j]] <- shell
  }
  
  class(final_shells)
  
  shape <- bind_rows(final_shells) %>%
    summarize_all(first) %>%
    mutate(search_id = isochrones$results$search_id[[i]])
  
  final_shapes[[i]] <- shape
  final_shells <- list()
}

final_sdf <- bind_rows(final_shapes)


# count_vendor <- scales::comma(length(unique(vendors$`Vendor ID`)))
# 
# count_black <- scales::comma(nrow(vendors %>% filter(HUB == "Black")))
# count_asian <- scales::comma(nrow(vendors %>% filter(HUB == "Asian")))
# count_hispanic <- scales::comma(nrow(vendors %>% filter(HUB == "Hispanic")))
# count_native <- scales::comma(nrow(vendors %>% filter(HUB == "Native American")))
# count_women <- scales::comma(nrow(vendors %>% filter(HUB == "Women Owned")))
# count_veteran <- scales::comma(nrow(vendors %>% filter(HUB == "Disabled Veteran")))


map_palette <- c("#008097", "#ED683F", "#EACA2D", "#5C2B1C", "#ED018C", "#185411")

```


```{=html}
<div class="column-screen-inset">
<div class="mainboxbox">
<div class="mainbox">

<div class="card">

<div class="cardbox">

<div class="left-card-col">

  <div class="card-side" style="width: 94%;">

    <div class="subtext">
      &#8212; Texas Comptroller (2023)
    </div>
  </div>
</div>

<div class="right-card-col">
```


```{r map}

iconList <- iconList(
  jp1  = makeIcon("www/svgs/jp-1.svg", "www/svgs/jp-1.svg", 24, 24),
  jp2  = makeIcon("www/svgs/jp-2.svg", "www/svgs/jp-2.svg", 24, 24),
  jp3  = makeIcon("www/svgs/jp-3.svg", "www/svgs/jp-3.svg", 24, 24),
  jp4  = makeIcon("www/svgs/jp-4.svg", "www/svgs/jp-4.svg", 24, 24),
  jp5  = makeIcon("www/svgs/jp-5.svg", "www/svgs/jp-5.svg", 24, 24)
)


leaflet(data = df, 
             # height = "90vh", 
             # width = "100%",
             elementId = "map",
             options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )
             ) %>%
  addProviderTiles(provider = "CartoDB.Positron") %>%
  addPolygons(
    data = dallas_co,
    fillColor = "#333333",
    fillOpacity = 0.03, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addPolygons(
    data = final_sdf,
    fillColor = "#fcba03",
    fillOpacity = 0.3, weight = 2, color = "#fcba03",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addMarkers(
    data = jpcourts,
    icon = ~iconList[Court],
  ) %>%
  addCircleMarkers(
    group = df$group[2],
    data = df %>% filter(show == 2),
    radius = 4,
    stroke = FALSE,
    color = "#c22d23",
    fillOpacity = 0.3
  ) %>%
  addCircleMarkers(
    group = df$group[1],
    data = df %>% filter(show == 1),
    radius = 4,
    stroke = FALSE,
    color = "#32a852",
    fillOpacity = 0.3
  ) %>%
  # addLegend(
  #   "topright",
  #   pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),
  #   values = ~HUB,
  #   title = "HUB Eligibility",
  #   opacity = 0.7
  # ) %>%
  addLayersControl(
    overlayGroups = levels(df$group),
    position = "topright",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])

```

```{=html}
</div>

</div>

</div>


</div>
</div>
</div>
```