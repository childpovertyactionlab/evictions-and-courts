---
pagetitle: "Evictions and Courts Map"
format: html
---

```{r setup, output = F, echo = F}

library(tidycensus)
library(sf)
require(tidyverse)
library(leaflet)
library(traveltimeR)
library(mapboxapi)
library(plotly)

dallas_co <- sf::read_sf("data/dallas_co.geojson")
# dallas_co <- tigris::counties(state = "TX") %>%
#   filter(NAME == "Dallas")
# sf::write_sf(dallas_co, "data/dallas_co.geojson")

jpcourts <- read_csv("C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv") %>%
  mutate(Court = paste0("jp", str_sub(`Court/Precinct`, 4, 4))) %>%
  sf::st_as_sf(coords = c("long", "lat")) %>%
  sf::st_set_crs(st_crs(dallas_co))
# jpcourts_geo <- jpcourts %>%
#   tidygeocoder::geocode(Address, method = "arcgis", lat = lat, long = long)
# write_csv(jpcourts_geo, "C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/JP Courts/jpcourts.csv")

isochrone <- mb_isochrone(jpcourts) %>%
  group_by(time) %>%
  summarize(geometry = st_union(geometry)) %>%
  st_transform(st_crs(dallas_co)) %>%
  st_make_valid() %>%
  st_intersection(dallas_co) %>%
  mutate(
    fill = case_match(
      time,
      15 ~ '#fcba03',
      10 ~ '#9fde00',
      5 ~ '#2ead00',
    ),
    opa = case_match(
      time,
      15 ~ 0.1,
      10 ~ 0.2,
      5 ~ 0.3,
    ),
    rgba = case_match(
      time,
      15 ~ rgb(50/255, 168/255, 82/255, 0.1),
      10 ~ rgb(50/255, 168/255, 82/255, 0.2),
      5 ~ rgb(50/255, 168/255, 82/255, 0.3)
    )
  ) %>%
  select(time, geometry, fill, opa, rgba)

anti <- st_difference(isochrone, dallas_co)
  
bounds <- sf::st_bbox(dallas_co)

expanded_bounds <- as.vector(c(
  xmin = bounds["xmin"] - 0.25, 
  ymin = bounds["ymin"] - 0.25, 
  xmax = bounds["xmax"] + 0.25, 
  ymax = bounds["ymax"] + 0.25
))


evictions <- arrow::read_parquet("C:/Users/taylo/CPAL Dropbox/Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.parquet")[-1,]

googlesheets4::gs4_auth(email = "taylor@childpovertyactionlab.org")

obs <- googlesheets4::read_sheet(ss = "https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk",
                               sheet = "Form Responses 1") %>%
  janitor::clean_names(.) %>%
  rename("timeStamp"="timestamp",
         "observer"="observer",
         "observationDate"="date_of_observation",
         "jpCourt"="justice_of_the_peace_court",
         "docketStart"="docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am",
         "docketEnd"="docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm",
         "caseType"="is_this_a_commercial_or_residential_eviction_case",
         "plaintiffName"="plaintiff_landlord_name",
         "plaintiffDesignee"="did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear",
         "plaintiffRep"="did_the_plaintiff_landlord_have_additional_representation_of_some_kind",
         "defName"="defendant_tenant_name",
         "defAppear"="did_the_defendant_tenant_appear",
         "defRep"="did_the_defendant_tenant_have_additional_representation_of_some_kind",
         "evicReason"="reason_for_eviction_select_multiple_if_applicable",
         "totalOwned"="total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50",
         "noticeVacate"="was_there_any_discussion_about_the_notice_to_vacate_ntv",
         "noticeConfirm"="if_yes_did_the_judge_confirm_the_ntv",
         "jpRuled"="the_jp_ruled_in_favor_of",
         "outcomeOther"="if_you_selected_other_please_specify_the_outcome_of_the_case_below",
         "otherNotes"="additional_case_notes"
  ) %>%
  filter(
    # !jpCourt %in% c("5-2", "3-2", "2-1"),
    !is.na(jpCourt),
    observationDate <= today()
  ) %>%
  mutate(jpCourt = paste("Court", jpCourt)) %>%
  filter(!is.na(jpCourt)) %>%
  mutate(jpRuled = factor(
    jpRuled, 
    levels =
        c("Plaintiff (landlord)",
          "Plaintiff by default (defendant no-show)",
          "Defendant (tenant)",
          "Defendant by default (plaintiff no-show)",
          "The case was abated or reset/rescheduled to a later date.",
          "The case was dismissed.",
          "Other",
          "Unknown"
        )
      )
    # labels = 
    #   c(
    #     "Plaintiff (landlord)" = "Plaintiff (landlord)",
    #     "Plaintiff by default (defendant no-show)" = "Plaintiff by default (defendant no-show)",
    #     "Unknown" = "Unknown",
    #     "Defendant (tenant)" = "Defendant (tenant)",
    #     "Other" = "Other",
    #     "Defendant by default (plaintiff no-show)" = "Defendant by default (plaintiff no-show)",
    #     "The case was abated or reset/rescheduled to a later date." = "The case was abated or rescheduled",
    #     "The case was dismissed." = "The case was dismissed"
    #   )
  )

  # mutate(outcomeParty = case_when(
  #   str_detect(jpRuled, "Plaintiff") ~ "Ruled in Favor of Landlord",
  #   str_detect(jpRuled, "Defendant") ~ "Ruled in Favor of Tenant",
  #   str_detect(jpRuled, "abated") ~ "Abated",
  #   str_detect(jpRuled, "dismissed") ~ "Dismissed",
  #   TRUE ~ jpRuled
  # ))

# outcomes <- obs %>%
#   group_by(jpCourt, outcomeParty, defAppear) %>%
#   summarize(count = n()) %>%
#   mutate(perOutcome = count/sum(count)) %>%
#   ungroup(.) %>%
#   group_by(outcomeParty) %>%
#   group_map(~ .x %>%
#           janitor::adorn_totals(),.keep = T) %>% 
#   bind_rows() %>%
#   mutate(test = lag(outcomeParty),
#          outcomeParty = ifelse(str_detect(outcomeParty, "Other|Dismissed|Abated|Ruled|Unknown"), outcomeParty, test)) %>%
#   select(-test) %>%
#   group_by(jpCourt) %>%
#   mutate(perOutcome = count/sum(count)) %>%
#   ungroup()


df0 <- evictions %>%
  right_join(obs, by = c("case_number"), suffix = c("", "_obs")) %>%
  filter(jpRuled %in%
    c("Plaintiff (landlord)",
      "Plaintiff by default (defendant no-show)")) %>%
  mutate(
    show = case_when(
      jpRuled == "Plaintiff (landlord)" ~ 1,
      jpRuled == "Plaintiff by default (defendant no-show)" ~ 2,
      TRUE ~ NA
    ))

ct <- NULL
ct$showcount <- nrow(df0 %>% filter(show == 1))
ct$noshowcount <- nrow(df0 %>% filter(show == 2))


df <- df0 %>%
  mutate(
    group = factor(case_when(
      jpRuled == "Plaintiff (landlord)" ~ paste0("Defendant appeared (", ct$showcount, ")"),
      jpRuled == "Plaintiff by default (defendant no-show)" ~ paste0("Defendant did not appear (", ct$noshowcount, ")"),
      TRUE ~ NA
    ), levels = c(
      paste0("Defendant appeared (", ct$showcount, ")"),
      paste0("Defendant did not appear (", ct$noshowcount, ")")
    )),
    lng = jitter(as.numeric(X), 0.001),
    lat = jitter(as.numeric(Y), 0.001)
  ) %>%
  filter(!is.na(lng), !is.na(lat)) %>%
  sf::st_as_sf(coords = c("lng", "lat")) %>%
  sf::st_set_crs(st_crs(isochrone)) %>%
  st_join(isochrone) %>%
  mutate(
    time = factor(if_else(is.na(time), "More than 15", as.character(time)),
                  levels = c("5","10","15","More than 15")),
    fill = if_else(is.na(fill), '#a36250', fill),
    gfill = case_match(
      group,
      levels(group)[1] ~ '#133091',
      levels(group)[2] ~ '#c22d23'
    ),
    id = row_number()
  )

time_count <- df %>%
  st_drop_geometry() %>%
  group_by(time) %>%
  summarize(tc = n())

show_time_count <- df %>%
  st_drop_geometry() %>%
  left_join(time_count, by = "time") %>%
  group_by(time, show) %>%
  summarize(n = n(), prop = n / first(tc), opa = first(opa)) %>%
  mutate(time = paste(time, "min."),
         time = case_match(
           time,
           "5 min." ~ "Less than 5 min.",
           "10 min." ~ "5 to 10 min.",
           "15 min." ~ "10 to 15 min.",
           time ~ paste0(time, "")),
         timel = tolower(time),
         opa = (if_else(is.na(opa), 0, opa) + 0.1) * 2,
          grgba = case_match(
            show,
            1 ~ rgb(19, 48, 145, opa*255, maxColorValue = 255),
            2 ~ rgb(194, 45, 35, opa*255, maxColorValue = 255)
          ),
         def_appeared = case_match(
            show,
            1 ~ "Defendant appeared",
            2 ~ "Defendant did not appear"
          )
         )

download <- df %>%
  st_drop_geometry() %>%
  mutate(
    def_appeared = case_match(
      show,
      1 ~ "def_appeared",
      2 ~ "def_not_appeared"
    ),
    drive_time_more_than = case_match(
      time,
      "5" ~ 0,
      "10" ~ 5,
      "15" ~ 10,
      "More than 15" ~ 15,
    )
  ) %>%
  group_by(drive_time_more_than, def_appeared, jp_court = jpCourt) %>%
  summarize(evictions = n()) %>%
  pivot_wider(
    names_from = def_appeared,
    values_from = evictions
  ) %>%
  mutate(
    def_appeared = if_else(is.na(def_appeared), 0, def_appeared),
    def_not_appeared = if_else(is.na(def_not_appeared), 0, def_not_appeared)
  )

write_csv(download, "data/evictions_and_courts.csv")

```

```{=html}
<div class="column-screen-inset">
<div class="mainboxbox">
<div class="mainbox">

<h4 style="margin-bottom: 10px;">Mapping eviction cases where defendants lost their case</h4>

<div class="card">

<div class="cardbox">

<div class="left-card-col">
  
  <div class="button-group">

    <input type="radio" class="btn-check" name="options" id="table" autocomplete="off" checked>
    <label class="btn btn-secondary" for="table">Table</label>
    
    <input type="radio" class="btn-check" name="options" id="chart" autocomplete="off">
    <label class="btn btn-secondary" for="chart">Chart</label>

  </div>
  
  <div class="card-side">
  
    <div class="table-box">

```    

```{r table}

show_time_count %>%
  mutate(
    def_appeared = case_match(
            show,
            1 ~ "Def. app.",
            2 ~ "Def. no app."
          )
  ) %>%
  select(`Drive time` = time, def_appeared, n) %>%
  pivot_wider(
    names_from = def_appeared,
    values_from = n
  ) %>%
  DT::datatable(options = list(dom = 't', ordering=F,
                               autoWidth = FALSE),
                rownames = FALSE)

```
   
```{=html}
    <span class="subtext"><i>Statistically insignificant correlation</i></span>
    </div>
    
    <div class="plotly-box" style="display: none;">

```

```{r plotly}

show_time_count %>%
  plot_ly(
    type = "bar",
    x = ~prop,
    y = ~time,
    customdata = ~I(def_appeared),
    hovertext = ~I(timel),
    text = ~I(scales::percent(prop, accuracy = 0.1)),
    hovertemplate = "<b>%{customdata}</b> and had to drive <b>%{hovertext}</b><br><br>Out of others driving %{hovertext}: <b>%{x:,.01%}<b><extra></extra>",
    marker = list(
      color = I(show_time_count$grgba)
    ),
    orientation = "h"
  ) %>%
  layout(
    width=300,
    height=250,
    autosize=T,
    dragmode = FALSE,
    barmode = 'stack',
    showlegend = FALSE,
    yaxis = list(title = NA,
                 categoryorder = "array",
                 categoryarray = c( "More than 15 min.", 
                                    "10 to 15 min.",
                                    "5 to 10 min.",
                                    "Less than 5 min."),
                 ticksuffix = "  "
                 ),
    xaxis = list(
      showgrid = FALSE,
      showticklabels = FALSE,
      title = NA,
      zeroline = FALSE
    ),
    hoverlabel = list(align = "left")
    # margin = list(
    #   l = 0,
    #   r = 0,
    #   t = 0,
    #   b = 0
    # ),
    
  ) %>% 
  config(displayModeBar = F)

```


```{=html}
    </div>
  
  </div>
  
  <div class="download-box">
    <div class="download">
      <a href="data/evictions_and_courts.csv" download>Download data <i class="bi bi-download"></i></a>
    </div>
  </div>
    
</div>

<div class="right-card-col">
```


```{r map}

iconList <- iconList(
  jp1  = makeIcon("www/svgs/jp-1.svg", "www/svgs/jp-1.svg", 24, 24),
  jp2  = makeIcon("www/svgs/jp-2.svg", "www/svgs/jp-2.svg", 24, 24),
  jp3  = makeIcon("www/svgs/jp-3.svg", "www/svgs/jp-3.svg", 24, 24),
  jp4  = makeIcon("www/svgs/jp-4.svg", "www/svgs/jp-4.svg", 24, 24),
  jp5  = makeIcon("www/svgs/jp-5.svg", "www/svgs/jp-5.svg", 24, 24)
)


leaflet(data = df, 
             # height = "90vh", 
             # width = "100%",
             elementId = "map",
             options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )
             ) %>%
  addProviderTiles(provider = "CartoDB.Positron") %>%
  addPolygons(
    data = dallas_co,
    fillColor = "#333333",
    fillOpacity = 0.03, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addPolygons(
    group = "Drive time zones",
    data = isochrone,
    fillColor = '#2ead00',
    fillOpacity = ~opa, 
    weight = 1, 
    color = "#333333",
    opacity = 0.1,
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addMarkers(
    group = "JP locations",
    data = jpcourts,
    icon = ~iconList[Court],
  ) %>%
  addCircleMarkers(
    group = levels(df$group)[2],
    data = df %>% filter(show == 2),
    radius = 2,
    stroke = FALSE,
    color = ~gfill,
    fillOpacity = 0.3
  ) %>%
  addCircleMarkers(
    group = levels(df$group)[1],
    data = df %>% filter(show == 1),
    radius = 2,
    stroke = FALSE,
    color = ~gfill,
    fillOpacity = 0.3
  ) %>%
  addLegend(
    "bottomright",
    pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
    values = isochrone$time,
    title = "Driving distance (min)",
    opacity = 1
  ) %>%
  addLayersControl(
    baseGroups = c(levels(df$group)),
    overlayGroups = c("Drive time zones", "JP locations"),
    position = "topright",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])  

```

```{=html}
</div>

</div>

</div>


</div>
</div>
</div>
```