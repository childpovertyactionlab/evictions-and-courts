options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
st_crs(dallas_co)
iconList <- iconList(
jp1  = makeIcon("www/svgs/jp-1.svg", "www/svgs/jp-1.svg", 24, 24),
jp2  = makeIcon("www/svgs/jp-2.svg", "www/svgs/jp-2.svg", 24, 24),
jp3  = makeIcon("www/svgs/jp-3.svg", "www/svgs/jp-3.svg", 24, 24),
jp4  = makeIcon("www/svgs/jp-4.svg", "www/svgs/jp-4.svg", 24, 24),
jp5  = makeIcon("www/svgs/jp-5.svg", "www/svgs/jp-5.svg", 24, 24)
)
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
cpal_mapbox_mono
cpaltemplates::cpal_mapbox_mono
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = "https://api.mapbox.com/styles/v1/michaelcpal/clsevmo9903ac01qq15lzg6r4/wmts?access_token=pk.eyJ1IjoibWljaGFlbGNwYWwiLCJhIjoiY2tnMmI5ejgyMDFhZDJxdDNqZjV4cmJ1aiJ9.Wy-HsM9Q6hyabrmIezakbQ", attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = "https://api.mapbox.com/styles/v1/michaelcpal/clsevmo9903ac01qq15lzg6r4/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoibWljaGFlbGNwYWwiLCJhIjoiY2tnMmI5ejgyMDFhZDJxdDNqZjV4cmJ1aiJ9.Wy-HsM9Q6hyabrmIezakbQ", attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_color, attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = "https://api.mapbox.com/styles/v1/michaelcpal/clqzkwbw800sw01nv90032l7z/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoibWljaGFlbGNwYWwiLCJhIjoiY2tnMmI5ejgyMDFhZDJxdDNqZjV4cmJ1aiJ9.Wy-HsM9Q6hyabrmIezakbQ", attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
leaflet(data = df,
# height = "90vh",
# width = "100%",
elementId = "map",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)
) %>%
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
# addProviderTiles(provider = "CartoDB.Positron") %>%
addMapPane("back", zIndex = 410) %>%
addMapPane("mid", zIndex = 415) %>%
addMapPane("front", zIndex = 420) %>%
addMapPane("veryfront", zIndex = 425) %>%
addPolygons(
data = dallas_co,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0.1, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
leaflet::addPolylines(
group = "JP locations",
data = jpbounds_inner,
fillColor = cpaltemplates::palette_cpal_gray[8],
fillOpacity = 0, weight = 2.5, color = cpaltemplates::palette_cpal_gray[8],
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "mid")
) %>%
addPolygons(
group = "Drive time zones",
data = isochrone,
fillColor = '#9c64f7',
fillOpacity = ~opa,
weight = 1,
color = cpaltemplates::palette_cpal_gray[8],
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F, pane = "back")
) %>%
addMarkers(
group = "JP locations",
data = jpcourts,
icon = ~iconList[Court],
options = pathOptions(pane = "veryfront")
) %>%
addCircleMarkers(
group = levels(df$group)[2],
data = df %>% filter(show == 2),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addCircleMarkers(
group = levels(df$group)[1],
data = df %>% filter(show == 1),
radius = 2,
stroke = FALSE,
color = ~gfill,
fillOpacity = 0.3,
options = pathOptions(pane = "front")
) %>%
addLegend(
"bottomright",
pal = colorFactor(palette = isochrone$rgba, alpha = TRUE, domain = isochrone$time),
values = isochrone$time,
title = "Driving distance (min)",
opacity = 1
) %>%
addLayersControl(
baseGroups = c(levels(df$group)),
overlayGroups = c("Drive time zones", "JP locations"),
position = "topright",
options = layersControlOptions(collapsed = FALSE)
) %>%
setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])
